// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using src.Data;

#nullable disable

namespace Backend.Migrations
{
    [DbContext(typeof(GreenBayDbContext))]
    partial class GreenBayDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("src.Models.Bid", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("BidAmount")
                        .HasColumnType("numeric");

                    b.Property<int>("BidderId")
                        .HasColumnType("integer");

                    b.Property<int>("ItemId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BidderId");

                    b.HasIndex("ItemId");

                    b.ToTable("TblBids");
                });

            modelBuilder.Entity("src.Models.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Bid")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsSellable")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhotoUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("SellerId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("SellerId");

                    b.ToTable("TblItems");
                });

            modelBuilder.Entity("src.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Money")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("TblUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationDate = new DateTime(2023, 9, 2, 12, 40, 50, 290, DateTimeKind.Utc).AddTicks(3227),
                            Email = "admin@fox.hu",
                            Money = 100.00m,
                            Name = "admin",
                            Password = "$2a$11$5r1/aQyXtVmiKrdO1ofawuQC5S6iUu1k1BJgeHbSwu8Qw.HJd0lem",
                            Role = "Admin",
                            UpdateDate = new DateTime(2023, 9, 2, 12, 40, 50, 290, DateTimeKind.Utc).AddTicks(3231)
                        },
                        new
                        {
                            Id = 2,
                            CreationDate = new DateTime(2023, 9, 2, 12, 40, 50, 633, DateTimeKind.Utc).AddTicks(1903),
                            Email = "testuser@abc.de",
                            Money = 100.00m,
                            Name = "testuser",
                            Password = "$2a$11$neucoBWYzxGfMk64OyWYTu4tY3I0agIFQ84.MqDggz59cY1Ifh5IO",
                            Role = "User",
                            UpdateDate = new DateTime(2023, 9, 2, 12, 40, 50, 633, DateTimeKind.Utc).AddTicks(1908)
                        });
                });

            modelBuilder.Entity("src.Models.UserBid", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("BidId")
                        .HasColumnType("integer");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "BidId");

                    b.HasIndex("BidId");

                    b.ToTable("TblUsersBids");
                });

            modelBuilder.Entity("src.Models.Bid", b =>
                {
                    b.HasOne("src.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("BidderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("src.Models.Item", "Item")
                        .WithMany("Bids")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("User");
                });

            modelBuilder.Entity("src.Models.Item", b =>
                {
                    b.HasOne("src.Models.User", "Seller")
                        .WithMany("ItemsForSale")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("src.Models.UserBid", b =>
                {
                    b.HasOne("src.Models.Bid", "Bid")
                        .WithMany()
                        .HasForeignKey("BidId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("src.Models.User", "User")
                        .WithMany("UserBids")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bid");

                    b.Navigation("User");
                });

            modelBuilder.Entity("src.Models.Item", b =>
                {
                    b.Navigation("Bids");
                });

            modelBuilder.Entity("src.Models.User", b =>
                {
                    b.Navigation("ItemsForSale");

                    b.Navigation("UserBids");
                });
#pragma warning restore 612, 618
        }
    }
}
