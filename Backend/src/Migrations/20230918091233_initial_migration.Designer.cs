// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using src.Data;

#nullable disable

namespace Backend.Migrations
{
    [DbContext(typeof(GreenBayDbContext))]
    [Migration("20230918091233_initial_migration")]
    partial class initial_migration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("src.Models.Bid", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("BidAmount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("BiderId")
                        .HasColumnType("integer");

                    b.Property<int>("ItemId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BiderId");

                    b.HasIndex("ItemId");

                    b.ToTable("TblBids");
                });

            modelBuilder.Entity("src.Models.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Bid")
                        .HasColumnType("numeric");

                    b.Property<int?>("BuyerId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsSellable")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhotoUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("SellerId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BuyerId");

                    b.HasIndex("SellerId");

                    b.ToTable("TblItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Bid = 0m,
                            CreationDate = new DateTime(2023, 9, 18, 9, 12, 33, 373, DateTimeKind.Utc).AddTicks(6853),
                            Description = "An amazing TV",
                            IsSellable = true,
                            Name = "TV Sony",
                            PhotoUrl = "https://s13emagst.akamaized.net/products/45635/45634164/images/res_fd42def37fbf80666320c5137faccaf1.jpeg",
                            Price = 30m,
                            SellerId = 1,
                            UpdateDate = new DateTime(2023, 9, 19, 9, 12, 33, 373, DateTimeKind.Utc).AddTicks(6854)
                        },
                        new
                        {
                            Id = 2,
                            Bid = 0m,
                            CreationDate = new DateTime(2023, 9, 18, 9, 12, 33, 373, DateTimeKind.Utc).AddTicks(6871),
                            Description = "A wanderful vacum.",
                            IsSellable = true,
                            Name = "Electrolux Vacum",
                            PhotoUrl = "https://www.electrolux.com.my/globalassets/appliances/vacuum-clearner/z931-fr-1500x1500.png",
                            Price = 20m,
                            SellerId = 2,
                            UpdateDate = new DateTime(2023, 9, 19, 9, 12, 33, 373, DateTimeKind.Utc).AddTicks(6871)
                        });
                });

            modelBuilder.Entity("src.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Money")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("TblUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationDate = new DateTime(2023, 9, 18, 9, 12, 33, 105, DateTimeKind.Utc).AddTicks(7886),
                            Email = "admin@fox.hu",
                            Money = 100.00m,
                            Name = "admin",
                            Password = "$2a$11$Poj.2plMPexV7CH4OUB3Bufu0pPE2N27d72IvMDsFy4tT6bXb2Uyy",
                            Role = "Admin",
                            UpdateDate = new DateTime(2023, 9, 18, 9, 12, 33, 105, DateTimeKind.Utc).AddTicks(7892)
                        },
                        new
                        {
                            Id = 2,
                            CreationDate = new DateTime(2023, 9, 18, 9, 12, 33, 373, DateTimeKind.Utc).AddTicks(5951),
                            Email = "testuser@abc.de",
                            Money = 100.00m,
                            Name = "testuser",
                            Password = "$2a$11$eGcR6Uv7Yq8dh9N2BMVGS.SutNMiPlRd8ZbrCySbcKT.w61CKLhDe",
                            Role = "User",
                            UpdateDate = new DateTime(2023, 9, 18, 9, 12, 33, 373, DateTimeKind.Utc).AddTicks(5957)
                        });
                });

            modelBuilder.Entity("src.Models.Bid", b =>
                {
                    b.HasOne("src.Models.User", "Bider")
                        .WithMany("Bids")
                        .HasForeignKey("BiderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("src.Models.Item", "Item")
                        .WithMany("Bids")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bider");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("src.Models.Item", b =>
                {
                    b.HasOne("src.Models.User", "Buyer")
                        .WithMany("BoughtItems")
                        .HasForeignKey("BuyerId");

                    b.HasOne("src.Models.User", "Seller")
                        .WithMany("SellingItems")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Buyer");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("src.Models.Item", b =>
                {
                    b.Navigation("Bids");
                });

            modelBuilder.Entity("src.Models.User", b =>
                {
                    b.Navigation("Bids");

                    b.Navigation("BoughtItems");

                    b.Navigation("SellingItems");
                });
#pragma warning restore 612, 618
        }
    }
}
